import me.hacket.config.Deps
import me.hacket.config.Versions

plugins {
    id 'com.android.application'
}

android {
    compileSdk Versions.compileSdkVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdk  Versions.minSdkVersion
        targetSdk Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName

        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file("${rootDir}/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        debug {
            storeFile file("${rootDir}/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            jniDebuggable false
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), "proguard-rules.pro"
        }

        debug {
            signingConfig signingConfigs.debug
            debuggable true
            jniDebuggable true
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), "proguard-rules.pro"
        }
    }

    dexOptions {
        incremental true
    }

    lintOptions {
        abortOnError false
    }

    // Project可用的标准属性
    println "name-->" + name  // app   --项目目录
    println "project-->" + project // project ':app'   -- project实例
    println "project.name-->" + project.name // app
    println "project.path-->" + project.path // :app  --项目绝对路径
    println "project.description-->" + project.description // null  --项目描述
    println "project.projectDir-->" + project.projectDir
    // D:\workspace_studio\gradle-config\app  --包含生成脚本的目录
    println "project.buildDir-->" + project.buildDir
    // D:\workspace_studio\gradle-config\app\build  --build目录
    println "project.ant-->" + project.ant
    // org.gradle.api.internal.project.DefaultAntBuilder@372f10ce  --AntBuilder实例

    // Android for gradle自带变量
    println '[rootDir]' + rootDir // D:\workspace_studio\gradle-config
    println '[buildDir]' + buildDir  // D:\workspace_studio\gradle-config\app\build
    println '[projectDir]' + projectDir // D:\workspace_studio\gradle-config\app
    println '[project]' + project // project ':app'
    println '[project]' + project.getName(); // app
    println '[rootProject]' + rootProject // root project 'gradle-config'

    // 引用配置文件里的变量
    // 使用 project.hasProperty('sdk.dir') 判断key值是否存在
    println '[sdk.dir]:' + project.hasProperty("sdk.dir") // true
    println '[sdk.ndk]:' + project.hasProperty("sdk.ndk") // true
    println '[sdk.hacket]:' + project.hasProperty("sdk.hacket") // false
    // 使用project.properties['sdk.dir']进行key值的value引用
    println '[sdk.dir]:' + project.getProperties().get("sdk.dir")
    // [sdk.dir]:D:\adt-bundle-windows-x86_64-20140702\sdk

    flavorDimensions "app"

    productFlavors {
        // 华为渠道
        huawei {
            dimension "app"
            getIsDefault().set(true) // that does the magic
            //编译渠道( CHANNEL_GOOGLE, CHANNEL_HW )
            buildConfigField "String", "BUILD_CHANNEL", '"CHANNEL_HW"'
        }
        // Google Play渠道
        google {
            dimension "app"
            /* ###支付渠道### 编译时不需要，仅运行调试时需开放对应渠道 */
            buildConfigField "String", "BUILD_CHANNEL", '"CHANNEL_GOOGLE"'
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation project(':ComposingBuildTest')

    implementation Deps.Kotlin.ktxCore
    implementation Deps.AndroidX.appcompat
    implementation Deps.AndroidX.recyclerview
    implementation Deps.AndroidX.constraintLayout
    implementation Deps.AndroidX.multidex

//    implementation 'me.hacket:Modularization1:1.0.0'
//    implementation 'me.hacket:Modularization2:1.0.0'

    implementation project(':testBuildTypeFlavor')
}
